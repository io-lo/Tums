#Unpack Hitchhiker

$unwack= @'
Add-Type -AssemblyName System.Web.Extensions

$t = ConvertTo-SecureString -String "01000000d08c9ddf0115d1118c7a00c04fc297eb01000000ba42e96fe921ba499035ca2e4b0cb23300000000020000000000106600000001000020000000f11952ce87776c486d635b85374d23d512309fc8bba2787f4e1ef81855000659000000000e8000000002000020000000922dda051e4c5355c1ac8a7de52df7252f93bbcea6098faa7b190c4f763ba1df20000000dca20f556d1c0285f342c4527512e8176a783bb190a8e32463867a18e2763333400000001584920d6076e161a78b2cf58ea7995157b591ed4d177bcb6dcfb64f8f422fbc713fd73f78855ae4f9600dc58e5232efc6228f5690a204827e0c0b345aa5c483"
$t = (New-Object System.Management.Automation.PSCredential('x',$t)).GetNetworkCredential().Password
$xk = [System.Text.Encoding]::UTF8.GetBytes($t)

function Remove-Formula {
    param($data, $key)
    $output = [byte[]]::new($data.Length)
    for ($i = 0; $i -lt $data.Length; $i++) {
        $output[$i] = $data[$i] -bxor $key[$i % $key.Length]
    }
    return $output
}

if ($Env:OneDriveCommercial) { $eo = $Env:OneDriveCommercial } else { $eo = $Env:OneDriveConsumer }
$thumbsPath = Join-Path $eo ((Get-ChildItem $eo | Where-Object { $_.Name -like "P*c*u*" -and $_.Attributes -match 'Directory' }).Name)
$thumbsDb = Join-Path $thumbsPath "thumbs.db"
$bytes = [System.IO.File]::ReadAllBytes($thumbsDb)
$encryptedData = $bytes[8..($bytes.Length - 1)]
$decryptedJsonBytes = Remove-Formula $encryptedData $xk
$jsonString = [System.Text.Encoding]::UTF8.GetString($decryptedJsonBytes)
$js = New-Object System.Web.Script.Serialization.JavaScriptSerializer
$maxLength = 50MB
$maxJsonLengthProp = $js.GetType().GetProperty('MaxJsonLength')
if ($maxJsonLengthProp) {
    $maxJsonLengthProp.SetValue($js, $maxLength, $null)
} else {
    $field = $js.GetType().GetField('_maxJsonLength', [System.Reflection.BindingFlags] "Instance,NonPublic")
    if ($field) { $field.SetValue($js, $maxLength) }
}
$fme = $js.DeserializeObject($jsonString)

foreach ($entry in $fme.GetEnumerator()) {
    $encPathBytes = [Convert]::FromBase64String($entry.Key)
    $decPathBytes = Remove-Formula $encPathBytes $xk
    $filePath = [System.Text.Encoding]::UTF8.GetString($decPathBytes)
    $encContentBytes = [Convert]::FromBase64String($entry.Value)
    $decContentBytes = Remove-Formula $encContentBytes $xk
    $ms = New-Object System.IO.MemoryStream(,$decContentBytes)
    $gz = New-Object System.IO.Compression.GzipStream($ms, [IO.Compression.CompressionMode]::Decompress)
    $outMs = New-Object System.IO.MemoryStream
    $buffer = New-Object byte[] 1024
    while (($read = $gz.Read($buffer, 0, $buffer.Length)) -gt 0) {$outMs.Write($buffer, 0, $read)}
    $gz.Close()
    $ms.Close()
    $originalBytes = $outMs.ToArray()
    $outMs.Close()
    $fullPath = Join-Path $PWD.Path $filePath
    $dir = Split-Path $fullPath -Parent
    if (-not (Test-Path $dir)) { New-Item -ItemType Directory -Path $dir -Force | Out-Null }
    [System.IO.File]::WriteAllBytes($fullPath, $originalBytes)
}

Write-Host "Decryption and decompression complete."
'@

powershell.exe -version 3 -command "$unwack"
